From 24b31c2a0e0f65831b89754d6c6e14ceed1cf7f8 Mon Sep 17 00:00:00 2001
From: Xert <xertdev@gmail.com>
Date: Mon, 19 Dec 2022 22:18:12 +0100
Subject: [PATCH] :zap: P6 production

---
 .gitignore        |   3 +
 draw.py           |   1 +
 main.py           |   4 +-
 productions/p6.py | 114 +++++++++------------
 test/p6test.py    | 252 ++++++++++++++++++++++++++++++++++++++++++++++
 utils.py          |   2 +-
 6 files changed, 304 insertions(+), 72 deletions(-)
 create mode 100644 test/p6test.py

diff --git a/.gitignore b/.gitignore
index 31bcc09..9af6171 100644
--- a/.gitignore
+++ b/.gitignore
@@ -81,6 +81,9 @@ target/
 profile_default/
 ipython_config.py
 
+# Idea
+.idea
+
 # pyenv
 .python-version
 
diff --git a/draw.py b/draw.py
index 022113b..cc01a97 100644
--- a/draw.py
+++ b/draw.py
@@ -16,6 +16,7 @@ def draw_graph(graph : nx.Graph, name: str):
     pos = {k:(v[Attr_MAP.x]+3*v[Attr_MAP.level], v[Attr_MAP.y]+4*v[Attr_MAP.level])for k,v in data.items()}
     color_list = [label_color_map[v[Attr_MAP.label]] for k,v in data.items()]
 
+    plt.clf()
     nx.draw_networkx(graph, pos, node_color=color_list)
     ax = plt.gca()
     plt.axis("off")
diff --git a/main.py b/main.py
index 8a27d70..efcdaf1 100644
--- a/main.py
+++ b/main.py
@@ -96,7 +96,7 @@ def makeP6():
 
 
 if __name__ == '__main__':
-    # makeP6()
-    makeP5()
+    makeP6()
+    #makeP5()
 
     # print(graph._node)
diff --git a/productions/p6.py b/productions/p6.py
index 075205d..a0b1e24 100644
--- a/productions/p6.py
+++ b/productions/p6.py
@@ -5,6 +5,7 @@ from utils import find_isomorphic_graph, update_graph
 
 def make_left_side_graph(unique_id: int, level) -> nx.Graph:
     left_side_graph = nx.Graph()
+
     left_side_graph.add_nodes_from([
         Node(id=unique_id, label="i", level=level).graph_adapter(),
         Node(id=unique_id + 2, label="i", level=level).graph_adapter(),
@@ -29,7 +30,7 @@ def make_left_side_graph(unique_id: int, level) -> nx.Graph:
         (unique_id, unique_id + 3),
         (unique_id + 2, unique_id + 1),
         (unique_id + 2, unique_id + 3),
-        (unique_id + 1, unique_id + 3), 
+        (unique_id + 1, unique_id + 3),
 
         (unique_id, unique_id + 4),
         (unique_id, unique_id + 5),
@@ -60,79 +61,54 @@ def make_left_side_graph(unique_id: int, level) -> nx.Graph:
     return left_side_graph
 
 
-def update_x_y_coords(graph: nx.Graph, mapping: dict) -> tuple[list, list]:
-    x_coords = []
-    y_coords = []
-    for _, node in mapping.items():
-        if graph.nodes[node][Attr_MAP.label] == 'E':
-            x_coords.append(graph.nodes[node][Attr_MAP.x])
-            y_coords.append(graph.nodes[node][Attr_MAP.y])
-
-    return x_coords, y_coords
-
-
-def make_right_side_nodes_and_edges(unique_id: int, coords: tuple[list, list], level) -> tuple[list[Node], list, Node]:
-    print(coords)
-    x, y = coords
-
-    parent_node = Node(id=unique_id, label='i', x=(x[0] + x[1] + x[2]) / 3, y=(y[0] + y[1] + y[2]) / 3, level=level + 1)
-    right_nodes = [
-        Node(id=1, label='I', x=(x[0] + x[5] + x[1]) / 3, y=(y[0] + y[1] + y[5]) / 3, level=level + 1),
-        Node(id=2, label='I',
-             x=((x[1] + x[2] + x[3]) / 3) - (((x[1] + x[2] + x[3]) / 3) * 0.1),
-             y=((y[1] + y[2] + y[3]) / 3) + (((y[1] + y[2] + y[3]) / 3) * 0.1),
-             level=level + 1),
-        Node(id=3, label='I',
-             x=((x[2] + x[3] + x[5]) / 3) + (((x[2] + x[3] + x[5]) / 3) * 0.1),
-             y=((y[2] + y[3] + y[5]) / 3) - (((y[2] + y[3] + y[5]) / 3) * 0.1),
-             level=level + 1),
-        Node(id=4, label='I', x=(x[3] + x[4] + x[5]) / 3, y=(y[3] + y[4] + y[5]) / 3, level=level + 1),
-
-        Node(id=5, label='E', x=x[0], y=y[0], level=level + 1),
-        Node(id=7, label='E', x=x[2], y=y[2], level=level + 1),
-        Node(id=9, label='E', x=x[4], y=y[4], level=level + 1),
+def merge_nodes(unique_id: int, mapping: dict, graph: nx.Graph):
+    adj = graph.adj
+    nodes = graph.nodes
 
-        Node(id=6, label='E', x=x[1], y=y[1], level=level + 1),
-        Node(id=8, label='E', x=x[3], y=y[3], level=level + 1),
-        Node(id=10, label='E', x=x[5], y=y[5], level=level + 1),
-
-    ]
-
-    edges = [
-        (unique_id, 1),
-        (unique_id, 2),
-        (unique_id, 3),
-        (unique_id, 4),
-
-        (1, 5),
-        (1, 6),
-        (1, 10),
-        (2, 6),
-        (2, 7),
-        (2, 10),
-        (3, 7),
-        (3, 8),
-        (3, 10),
-        (4, 8),
-        (4, 9),
-        (4, 10),
-
-        (5, 6),
-        (6, 7),
-        (7, 8),
-        (8, 9),
-        (9, 10),
-        (10, 5),
+    nodes_to_join_list = [
+        (unique_id + 12, unique_id + 7),
     ]
-
-    return right_nodes, edges, parent_node
+    
+    candidate_left = nodes[mapping[unique_id + 6]]
+    candidate_right = nodes[mapping[unique_id + 13]]
+    
+    if candidate_left["x"] == candidate_right["x"] and candidate_left["y"] == candidate_right["y"]:
+        nodes_to_join_list += [
+            (unique_id + 6, unique_id + 13),
+            (unique_id + 8, unique_id + 11),
+        ]
+    else:
+        nodes_to_join_list += [
+            (unique_id + 8, unique_id + 13),
+            (unique_id + 6, unique_id + 11),
+        ]
+
+    for nodes_to_join in nodes_to_join_list:
+        left_real_id = mapping[nodes_to_join[0]]
+        right_real_id = mapping[nodes_to_join[1]]
+
+        left_node = nodes[left_real_id]
+        right_node = nodes[right_real_id]
+
+        same_pos = left_node["x"] == right_node["x"] and left_node["y"] == right_node["y"] and left_node["level"] == right_node["level"]
+        if not same_pos or left_node["label"] != right_node["label"]:
+            return
+
+    for nodes_to_join in nodes_to_join_list:
+        left_real_id = mapping[nodes_to_join[0]]
+        right_real_id = mapping[nodes_to_join[1]]
+        
+        lonely_nodes = adj[left_real_id]
+        
+        for lonely_node_id in lonely_nodes:
+            graph.add_edge(right_real_id, lonely_node_id)
+            
+        graph.remove_node(left_real_id)
 
 
 def p6(graph: nx.Graph, level):
     unique_id = 555  # id that will be match egde from left side to right side production graph be used must be higher than max number of id used
     left_graph = make_left_side_graph(unique_id, level)
     isomorphic_mapping = find_isomorphic_graph(graph, left_graph)
-    right_side_nodes, right_side_edges, right_unique_node = make_right_side_nodes_and_edges(
-        unique_id, update_x_y_coords(graph, isomorphic_mapping), level)
-    update_graph(graph, isomorphic_mapping, right_unique_node,
-                 right_side_nodes, right_side_edges)
+
+    merge_nodes(unique_id, isomorphic_mapping, graph)
diff --git a/test/p6test.py b/test/p6test.py
new file mode 100644
index 0000000..c37444f
--- /dev/null
+++ b/test/p6test.py
@@ -0,0 +1,252 @@
+import unittest
+import networkx as nx
+from classes import Node
+from productions.p6 import p6
+
+
+class P6Test(unittest.TestCase):
+    def test_no_production(self):
+        graph = nx.Graph()
+        graph.add_nodes_from([Node(0, label='El', x=0, y=0).graph_adapter()])
+        self.assertRaises(IndexError, lambda: p6(graph, 0))
+
+        self.assertEqual(list(graph.nodes), [0])
+        self.assertEqual(graph._node, {0: {'label': 'El', "level": 0, 'x': 0, 'y': 0}})
+
+    def test_production_success(self):
+        graph = nx.Graph()
+        graph.add_nodes_from([
+            Node(id=0, label="i", level=0, x=0.5, y=1.0).graph_adapter(),
+            Node(id=0 + 2, label="i", level=0, x=1.0, y=0.0).graph_adapter(),
+            Node(id=0 + 1, label="E", level=0, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 3, label="E", level=0, x=1.0, y=1.0).graph_adapter(),
+
+            Node(id=0 + 4, label="I", level=0 + 1, x=0.33, y=1.33).graph_adapter(),
+            Node(id=0 + 5, label="I", level=0 + 1, x=0.66, y=1.33).graph_adapter(),
+            Node(id=0 + 6, label="E", level=0 + 1, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 7, label="E", level=0 + 1, x=0.5, y=0.5).graph_adapter(),
+            Node(id=0 + 8, label="E", level=0 + 1, x=1.0, y=1.0).graph_adapter(),
+
+            Node(id=0 + 9, label="I", level=0 + 1, x=0.33, y=-0.33).graph_adapter(),
+            Node(id=0 + 10, label="I", level=0 + 1, x=0.66, y=-0.33).graph_adapter(),
+            Node(id=0 + 11, label="E", level=0 + 1, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 12, label="E", level=0 + 1, x=0.5, y=0.5).graph_adapter(),
+            Node(id=0 + 13, label="E", level=0 + 1, x=1.0, y=1.0).graph_adapter(),
+        ])
+
+        graph.add_edges_from([
+            (0, 0 + 1),
+            (0, 0 + 3),
+            (0 + 2, 0 + 1),
+            (0 + 2, 0 + 3),
+            (0 + 1, 0 + 3),
+
+            (0, 0 + 4),
+            (0, 0 + 5),
+
+            (0 + 2, 0 + 9),
+            (0 + 2, 0 + 10),
+
+            (0 + 4, 0 + 6),
+            (0 + 4, 0 + 7),
+
+            (0 + 5, 0 + 7),
+            (0 + 5, 0 + 8),
+
+            (0 + 6, 0 + 7),
+            (0 + 7, 0 + 8),
+
+            (0 + 9, 0 + 11),
+            (0 + 9, 0 + 12),
+
+            (0 + 10, 0 + 12),
+            (0 + 10, 0 + 13),
+
+            (0 + 11, 0 + 12),
+            (0 + 12, 0 + 13),
+        ])
+        
+        p6(graph, 0)
+        
+        self.assertEqual(len(list(graph.nodes)), 11)
+        
+        self.assertTrue(graph.has_edge(0, 4))
+        self.assertTrue(graph.has_edge(0, 5))
+        self.assertTrue(graph.has_edge(2, 10))
+        self.assertTrue(graph.has_edge(2, 9))
+        
+        self.assertTrue(graph.has_edge(9, 7))
+        self.assertTrue(graph.has_edge(9, 11))
+        self.assertTrue(graph.has_edge(10, 7))
+        self.assertTrue(graph.has_edge(10, 13))
+        
+        self.assertTrue(graph.has_edge(4, 11))
+        self.assertTrue(graph.has_edge(4, 7))
+        self.assertTrue(graph.has_edge(5, 7))
+        self.assertTrue(graph.has_edge(5, 13))
+        
+        self.assertTrue(graph.has_edge(11, 7))
+        self.assertTrue(graph.has_edge(11, 4))
+        self.assertTrue(graph.has_edge(11, 9))
+        
+        self.assertTrue(graph.has_edge(13, 7))
+        self.assertTrue(graph.has_edge(13, 5))
+        self.assertTrue(graph.has_edge(13, 10))
+
+    def test_production_success_with_lonely_nodes(self):
+        graph = nx.Graph()
+        graph.add_nodes_from([
+            Node(id=0, label="i", level=0, x=0.5, y=1.0).graph_adapter(),
+            Node(id=0 + 2, label="i", level=0, x=1.0, y=0.0).graph_adapter(),
+            Node(id=0 + 1, label="E", level=0, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 3, label="E", level=0, x=1.0, y=1.0).graph_adapter(),
+
+            Node(id=0 + 4, label="I", level=0 + 1, x=0.33, y=1.33).graph_adapter(),
+            Node(id=0 + 5, label="I", level=0 + 1, x=0.66, y=1.33).graph_adapter(),
+            Node(id=0 + 6, label="E", level=0 + 1, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 7, label="E", level=0 + 1, x=0.5, y=0.5).graph_adapter(),
+            Node(id=0 + 8, label="E", level=0 + 1, x=1.0, y=1.0).graph_adapter(),
+
+            Node(id=0 + 9, label="I", level=0 + 1, x=0.33, y=-0.33).graph_adapter(),
+            Node(id=0 + 10, label="I", level=0 + 1, x=0.66, y=-0.33).graph_adapter(),
+            Node(id=0 + 11, label="E", level=0 + 1, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 12, label="E", level=0 + 1, x=0.5, y=0.5).graph_adapter(),
+            Node(id=0 + 13, label="E", level=0 + 1, x=1.0, y=1.0).graph_adapter(),
+            
+            Node(id=0 + 14, label="L", level=0 + 1, x=20.0, y=1.0).graph_adapter(),
+            Node(id=0 + 15, label="L", level=0 + 1, x=21.0, y=1.0).graph_adapter(),
+            Node(id=0 + 16, label="L", level=0 + 1, x=22.0, y=1.0).graph_adapter(),
+            
+        ])
+
+        graph.add_edges_from([
+            (0, 0 + 1),
+            (0, 0 + 3),
+            (0 + 2, 0 + 1),
+            (0 + 2, 0 + 3),
+            (0 + 1, 0 + 3),
+
+            (0, 0 + 4),
+            (0, 0 + 5),
+
+            (0 + 2, 0 + 9),
+            (0 + 2, 0 + 10),
+
+            (0 + 4, 0 + 6),
+            (0 + 4, 0 + 7),
+
+            (0 + 5, 0 + 7),
+            (0 + 5, 0 + 8),
+
+            (0 + 6, 0 + 7),
+            (0 + 7, 0 + 8),
+
+            (0 + 9, 0 + 11),
+            (0 + 9, 0 + 12),
+
+            (0 + 10, 0 + 12),
+            (0 + 10, 0 + 13),
+
+            (0 + 11, 0 + 12),
+            (0 + 12, 0 + 13),
+
+            (0 + 6, 0 + 14),
+            (0 + 12, 0 + 15),
+            (0 + 8, 0 + 16),
+        ])
+
+        p6(graph, 0)
+
+        self.assertEqual(len(list(graph.nodes)), 14)
+
+        self.assertTrue(graph.has_edge(0, 4))
+        self.assertTrue(graph.has_edge(0, 5))
+        self.assertTrue(graph.has_edge(2, 10))
+        self.assertTrue(graph.has_edge(2, 9))
+
+        self.assertTrue(graph.has_edge(9, 7))
+        self.assertTrue(graph.has_edge(9, 11))
+        self.assertTrue(graph.has_edge(10, 7))
+        self.assertTrue(graph.has_edge(10, 13))
+
+        self.assertTrue(graph.has_edge(4, 11))
+        self.assertTrue(graph.has_edge(4, 7))
+        self.assertTrue(graph.has_edge(5, 7))
+        self.assertTrue(graph.has_edge(5, 13))
+
+        self.assertTrue(graph.has_edge(11, 7))
+        self.assertTrue(graph.has_edge(11, 4))
+        self.assertTrue(graph.has_edge(11, 9))
+
+        self.assertTrue(graph.has_edge(13, 7))
+        self.assertTrue(graph.has_edge(13, 5))
+        self.assertTrue(graph.has_edge(13, 10))
+        
+        self.assertTrue(graph.has_edge(11, 14))
+        self.assertTrue(graph.has_edge(7, 15))
+        self.assertTrue(graph.has_edge(13, 16))
+
+    def test_production_wrong_pos(self):
+        graph = nx.Graph()
+        graph.add_nodes_from([
+            Node(id=0, label="i", level=0, x=0.5, y=1.0).graph_adapter(),
+            Node(id=0 + 2, label="i", level=0, x=1.0, y=0.0).graph_adapter(),
+            Node(id=0 + 1, label="E", level=0, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 3, label="E", level=0, x=1.0, y=1.0).graph_adapter(),
+
+            Node(id=0 + 4, label="I", level=0 + 1, x=0.33, y=1.33).graph_adapter(),
+            Node(id=0 + 5, label="I", level=0 + 1, x=0.66, y=1.33).graph_adapter(),
+            Node(id=0 + 6, label="E", level=0 + 1, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 7, label="E", level=0 + 1, x=0.5, y=0.5).graph_adapter(),
+            Node(id=0 + 8, label="E", level=0 + 1, x=1.0, y=1.0).graph_adapter(),
+
+            Node(id=0 + 9, label="I", level=0 + 1, x=0.33, y=-0.33).graph_adapter(),
+            Node(id=0 + 10, label="I", level=0 + 1, x=0.66, y=-0.33).graph_adapter(),
+            Node(id=0 + 11, label="E", level=0 + 1, x=0.0, y=0.0).graph_adapter(),
+            Node(id=0 + 12, label="E", level=0 + 1, x=0.51, y=0.5).graph_adapter(),
+            Node(id=0 + 13, label="E", level=0 + 1, x=1.0, y=1.0).graph_adapter(),
+        ])
+
+        graph.add_edges_from([
+            (0, 0 + 1),
+            (0, 0 + 3),
+            (0 + 2, 0 + 1),
+            (0 + 2, 0 + 3),
+            (0 + 1, 0 + 3),
+
+            (0, 0 + 4),
+            (0, 0 + 5),
+
+            (0 + 2, 0 + 9),
+            (0 + 2, 0 + 10),
+
+            (0 + 4, 0 + 6),
+            (0 + 4, 0 + 7),
+
+            (0 + 5, 0 + 7),
+            (0 + 5, 0 + 8),
+
+            (0 + 6, 0 + 7),
+            (0 + 7, 0 + 8),
+
+            (0 + 9, 0 + 11),
+            (0 + 9, 0 + 12),
+
+            (0 + 10, 0 + 12),
+            (0 + 10, 0 + 13),
+
+            (0 + 11, 0 + 12),
+            (0 + 12, 0 + 13),
+        ])
+
+        graph_copy = graph.copy()
+        
+        p6(graph, 0)
+
+        self.assertEqual(len(list(graph.nodes)), 14)
+
+        for node in graph_copy.nodes:
+            self.assertTrue(graph.has_node(node))
+            
+        for key, value in graph_copy.edges.items():
+            self.assertTrue(graph.has_edge(key[0], key[1]))
diff --git a/utils.py b/utils.py
index 5c7c461..3892884 100644
--- a/utils.py
+++ b/utils.py
@@ -40,7 +40,7 @@ def update_graph(
     for k,v in isomorphic_mapping.items():
         right_side_nodes_mapping[k] = v
 
-    for i in  range(len(right_side_nodes_new)):
+    for i in range(len(right_side_nodes_new)):
         if right_side_nodes_new[i].id not in isomorphic_mapping.keys():
             right_side_nodes_new[i].id = right_side_nodes_new[i].id + n
         else:
-- 
2.35.1

